image: openjdk:8-jdk

stages:
  - build
  - test
  - package


####################################################################################################
# BUILD
#
.build_template: &build_template_def
  stage: build
  artifacts:
    expire_in: 4 hours
    paths:
      - Frontend/AppSensores/app/build/outputs/
      - Frontend/AppSensores/.android/

  before_script:
    # Extract the SDK version that we're building against
    - export ANDROID_COMPILE_SDK=`egrep '^[[:blank:]]+compileSdkVersion'  /Frontend/AppSensores/app/build.gradle | awk '{print $2}'`

    # Explict output for logging purpose only
    - echo $ANDROID_SDK_TOOLS
    - echo $ANDROID_COMPILE_SDK

    # Fetch the specified SDK tools version to build with
    - wget --quiet --output-document=/tmp/sdk-tools-linux.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
    - unzip /tmp/sdk-tools-linux.zip -d /Frontend/AppSensores/.android

    # Set up environment variables
    - export ANDROID_HOME=$PWD/Frontend/AppSensores/.android
    - export PATH=$PATH:$PWD/Frontend/AppSensores/.android/platform-tools/

    # Install platform tools and Android SDK for the compile target
    - echo y | /Frontend/AppSensores/.android/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"

    - chmod +x /Frontend/AppSensores/gradlew

build_debug:
  <<: *build_template_def
  only:
    - develop

  script:
    - /Frontend/AppSensores/gradlew assembleDebug

build_release:
  <<: *build_template_def
  only:
    - master
  script:
    - /Frontend/AppSensores/gradlew assembleRelease

####################################################################################################
# UNIT TESTING
#

unit_test:
  stage: test
  only:
    - master
    - develop

  before_script:
    - export ANDROID_HOME=$PWD/Frontend/AppSensores/.android
    - export PATH=$PATH:$PWD/Frontend/AppSensores/.android/platform-tools/
    - chmod +x /Frontend/AppSensores/gradlew

  script:
    - /Frontend/AppSensores/gradlew test


####################################################################################################
# PACKAGE APK FOR DOWNLOADING
#

.package_template: &package_template_def
  before_script:
    - export VERSION_NAME=`egrep '^[[:blank:]]+versionName[[:blank:]]'  app/build.gradle | awk '{print $2}' | sed s/\"//g`
    - export VERSION_CODE=`egrep '^[[:blank:]]+versionCode[[:blank:]]'  app/build.gradle | awk '{print $2}'`
    - mkdir -p deliverables

    # Store some information about the build
    - touch /Frontend/AppSensores/deliverables/info.txt
    - echo "Build date          $(date)"                >> /Frontend/AppSensores/deliverables/info.txt
    - echo "App version name    ${VERSION_NAME}"        >> /Frontend/AppSensores/deliverables/info.txt
    - echo "App version code    ${VERSION_CODE}"        >> /Frontend/AppSensores/deliverables/info.txt
    - echo "Git branch          ${CI_COMMIT_REF_NAME}"  >> /Frontend/AppSensores/deliverables/info.txt
    - echo "Git commit          ${CI_COMMIT_SHA}"       >> /Frontend/AppSensores/deliverables/info.txt
    - echo "Gitlab pipeline     ${CI_PIPELINE_ID}"      >> /Frontend/AppSensores/deliverables/info.txt


package_develop:
  <<: *package_template_def
  stage: package
  environment: Development
  only:
    - develop
  script:
    - mv /Frontend/AppSensores/app/build/outputs/apk/debug/app-debug.apk /Frontend/AppSensores/deliverables/sensores-v$VERSION_NAME-$VERSION_CODE-debug.apk
  artifacts:
    expire_in: 3 days
    paths:
      - Frontend/AppSensores/deliverables

package_release:
  <<: *package_template_def
  stage: package
  environment: Release
  only:
    - master
  script:
    - mv Frontend/AppSensores/app/build/outputs/apk/reslease/app-release-unsigned.apk Frontend/AppSensores//deliverables/NameOfTheApp-v$VERSION_NAME-$VERSION_CODE-release.apk
  artifacts:
    expire_in: 4 weeks
    paths:
      - Frontend/AppSensores/deliverables
